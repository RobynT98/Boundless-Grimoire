import { createStore, get, set } from 'idb-keyval'
import type { Collection, Entry, Settings } from './types'

const store = createStore('grimoire-db', 'kv')

const DEFAULT_COLLECTIONS: Collection[] = [
  {
    id: 'demons', name: 'Demoner', icon: 'üëπ',
    fields: [
      { key:'rank',        label:'Rang',               type:'select', options:['Kung','Prins','Hertig','Markis','Greve','President','Furste','Soldat','Ok√§nd'] },
      { key:'aspect',      label:'Aspekt/omr√•de',      type:'text' },
      { key:'planet',      label:'Planet',             type:'select', options:['Sol','M√•ne','Mars','Merkurius','Jupiter','Venus','Saturnus','‚Äî'] },
      { key:'element',     label:'Element',            type:'select', options:['Eld','Vatten','Luft','Jord','Ande','‚Äî'] },
      { key:'incense',     label:'R√∂kelse/√∂rt',        type:'text' },
      { key:'offering',    label:'Erbjudanden',        type:'text' },
      { key:'day',         label:'Dag/tid',            type:'text' },
      { key:'sigil',       label:'Sigill (beskrivning)', type:'longtext' },
      { key:'warnings',    label:'Varningar',          type:'longtext' }
    ]
  },
  {
    id: 'gods', name: 'Gudar', icon: '‚ö°',
    fields: [
      { key:'pantheon',    label:'Pantheon',           type:'text' },
      { key:'domains',     label:'Dom√§ner',            type:'text' },
      { key:'epithets',    label:'Epitet/titlar',      type:'text' },
      { key:'festival',    label:'H√∂gtider/dagar',     type:'text' },
      { key:'sacred',      label:'Heliga djur/platser',type:'text' },
      { key:'correspond',  label:'Korrespondenser',    type:'longtext' }
    ]
  },
  {
    id: 'angels', name: '√Ñnglar', icon: 'ü™Ω',
    fields: [
      { key:'choir',       label:'K√∂r/hierarki',       type:'select', options:['√Ñrke√§ngel','Knekt','K√∂rer','Troner','Krafterna','Furstar','Herrav√§lden','Keruber','Serafer','Ok√§nd'] },
      { key:'office',      label:'Uppdrag/titel',      type:'text' },
      { key:'sigil',       label:'Sigill/tecken',      type:'longtext' },
      { key:'virtues',     label:'Dygder/hj√§lp',       type:'longtext' },
      { key:'psalm',       label:'Psalm/vers',         type:'text' }
    ]
  },
  {
    id: 'spirits', name: 'Naturv√§sen', icon: 'üå≤',
    fields: [
      { key:'region',      label:'Region/habitat',     type:'text' },
      { key:'type',        label:'Typ',                type:'select', options:['Skog','Vatten','Berg','F√§lt','Hush√•ll','Gr√§nsplatser','√ñken','Ok√§nd'] },
      { key:'traits',      label:'Drag',               type:'longtext' },
      { key:'gifts',       label:'G√•vor/etikett',      type:'longtext' },
      { key:'risks',       label:'Risker',             type:'longtext' }
    ]
  },
  {
    id: 'creatures', name: 'V√§sen', icon: 'üêæ',
    fields: [
      { key:'habitat',     label:'Habitat',            type:'text' },
      { key:'taxonomy',    label:'Typ',                type:'text' },
      { key:'behavior',    label:'Beteende',           type:'longtext' },
      { key:'signs',       label:'Tecken/omst√§ndigheter', type:'longtext' }
    ]
  },
  {
    id: 'crystals', name: 'Kristaller & mineraler', icon: 'üíé',
    fields: [
      { key:'hardness',    label:'H√•rdhet (Mohs)',     type:'number' },
      { key:'color',       label:'F√§rg',               type:'text' },
      { key:'system',      label:'Kristallsystem',     type:'text' },
      { key:'chakra',      label:'Chakra',             type:'select', options:['Rot','Sakral','Solar plexus','Hj√§rta','Hals','Tredje √∂gat','Krona','Alla'] },
      { key:'element',     label:'Element',            type:'select', options:['Eld','Vatten','Luft','Jord','Ande','‚Äî'] },
      { key:'uses',        label:'Anv√§ndning',         type:'longtext' },
      { key:'cleansing',   label:'Reng√∂ring/laddning', type:'longtext' }
    ]
  },
  {
    id: 'herbs', name: '√ñrter & v√§xter', icon: 'üåø',
    fields: [
      { key:'latin',       label:'Latinskt namn',      type:'text' },
      { key:'parts',       label:'Delar som anv√§nds',  type:'text' },
      { key:'planet',      label:'Planet',             type:'select', options:['Sol','M√•ne','Mars','Merkurius','Jupiter','Venus','Saturnus','‚Äî'] },
      { key:'element',     label:'Element',            type:'select', options:['Eld','Vatten','Luft','Jord','Ande','‚Äî'] },
      { key:'uses',        label:'Anv√§ndning',         type:'longtext' },
      { key:'correspondences', label:'Korrespondenser', type:'longtext' },
      { key:'safety',      label:'S√§kerhet',           type:'longtext' }
    ]
  },
  {
    id: 'aura', name: 'Aura', icon: '‚ú®',
    fields: [
      { key:'color',       label:'F√§rg/nyans',         type:'text' },
      { key:'state',       label:'Tillst√•nd/r√∂relse',  type:'text' },
      { key:'reading',     label:'Tolkning',           type:'longtext' },
      { key:'balance',     label:'Rekommenderad balans', type:'longtext' }
    ]
  },
  {
    id: 'runes', name: 'Runor', icon: '·ö†',
    fields: [
      { key:'glyph',       label:'Grafem',             type:'text' },
      { key:'phoneme',     label:'Ljudv√§rde',          type:'text' },
      { key:'meaning',     label:'Betydelser',         type:'longtext' },
      { key:'reversed',    label:'Omv√§nd betydelse',   type:'longtext' },
      { key:'galdr',       label:'Bindrunor/galdrar',  type:'longtext' }
    ]
  },
  {
    id: 'healing', name: 'Healing', icon: 'üúÅ',
    fields: [
      { key:'method',      label:'Metod/verktyg',      type:'text' },
      { key:'intent',      label:'Syfte',              type:'text' },
      { key:'materials',   label:'Material',           type:'longtext' },
      { key:'steps',       label:'Steg',               type:'longtext' },
      { key:'aftercare',   label:'Efterv√•rd',          type:'longtext' },
      { key:'contra',      label:'Kontraindikationer', type:'longtext' }
    ]
  },
  {
    id: 'curses', name: 'F√∂rbannelser', icon: '‚ò†Ô∏è',
    fields: [
      { key:'target',      label:'M√•l/avsikt',         type:'text' },
      { key:'materials',   label:'Material',           type:'longtext' },
      { key:'construction',label:'Konstruktion',       type:'longtext' },
      { key:'safety',      label:'S√§kerhet/avslut',    type:'longtext' },
      { key:'ethics',      label:'Etik/√∂verv√§ganden',  type:'longtext' }
    ]
  },
  {
    id: 'spells', name: 'Trollformler', icon: 'ü™Ñ',
    fields: [
      { key:'intent',      label:'Avsikt',             type:'text' },
      { key:'timing',      label:'F√∂nster (tid/astro)',type:'text' },
      { key:'ingredients', label:'Ingredienser',       type:'longtext' },
      { key:'execution',   label:'Utf√∂rande',          type:'longtext' },
      { key:'omens',       label:'Tecken p√• effekt',   type:'longtext' }
    ]
  },
  {
    id: 'rituals', name: 'Ritualer', icon: 'üïØÔ∏è',
    fields: [
      { key:'purpose',     label:'Syfte',              type:'text' },
      { key:'tools',       label:'Verktyg/korrespondenser', type:'longtext' },
      { key:'steps',       label:'Steg',               type:'longtext' },
      { key:'closing',     label:'Risker/brytning',    type:'longtext' }
    ]
  },
  { id: 'notes', name: 'Anteckningar', icon: 'üìù', fields: [] }
]

export async function getCollections(): Promise<Collection[]> {
  const col = await get<Collection[]>('collections', store)
  if (!col) {
    await set('collections', DEFAULT_COLLECTIONS, store)
    return DEFAULT_COLLECTIONS
  }
  return col
}

export async function saveCollections(cols: Collection[]) { await set('collections', cols, store) }
export async function getEntries(): Promise<Entry[]> { return (await get<Entry[]>('entries', store)) ?? [] }
export async function saveEntries(entries: Entry[]) { await set('entries', entries, store) }
export async function getSettings(): Promise<Settings> { return (await get<Settings>('settings', store)) ?? { theme: 'dark', language: 'sv' } }
export async function saveSettings(s: Settings) { await set('settings', s, store) }

export async function exportAll() {
  const [collections, entries, settings] = await Promise.all([getCollections(), getEntries(), getSettings()])
  return { collections, entries, settings, version: 2 }
}
export async function importAll(payload: any) {
  if (!payload) return
  if (payload.collections) await saveCollections(payload.collections)
  if (payload.entries) await saveEntries(payload.entries)
  if (payload.settings) await saveSettings(payload.settings)
}